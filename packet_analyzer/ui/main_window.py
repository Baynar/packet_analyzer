import os

from PySide2.QtCore import Slot, QModelIndex
from PySide2.QtWidgets import QMainWindow, QFileDialog

from anytree import Resolver

from packet_analyzer.ui.widgets.autogenerated.main_window import Ui_main_window

from packet_analyzer.ui.model.network_event_list_model import NetworkEventListModel
from packet_analyzer.ui.model.object_tree_model import ObjectTreeModel

from packet_analyzer.core.game_session import GameSession
from packet_analyzer.core import proto_tree


class MainWindow(QMainWindow, Ui_main_window):

    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)

        self.setupUi(self)
        self.window_title = self.windowTitle()

        self._setup_slots()

    def _setup_slots(self):
        # MenuBar
        self.action_open.triggered.connect(self.on_file_open_clicked)

    def on_file_open_clicked(self):
        file_path, _ = QFileDialog.getOpenFileName(self)

        if os.path.isfile(file_path):
            # Sets windows title based on open file.
            self.setWindowTitle(file_path + " - " + self.window_title)

            # Initializes game session from file.
            game_session = GameSession.from_file(file_path)

            # Builds the tree based on the game session object hierarchy.
            tree = proto_tree.construct_protocol_tree(game_session)

            # Creates network event list model and sets to view.
            network_event_list_model = NetworkEventListModel()
            network_event_list_model.set_root(tree)
            self.event_list.setModel(network_event_list_model)

            # Creates object tree model and sets to view.
            object_tree_model = ObjectTreeModel()
            object_tree_model.set_root(tree)
            self.object_tree.setModel(object_tree_model)

            # Selects first element of network event list.
            event_list_first_item = self.event_list.model().index(0, 0, QModelIndex())
            self.event_list.setCurrentIndex(event_list_first_item)
            self.on_event_list_activated(event_list_first_item)

    @Slot(QModelIndex)
    def on_event_list_activated(self, index: QModelIndex):
        # Gets activated node.
        activated_node = index.internalPointer()

        # Recover node packet list.
        r = Resolver('name')
        packets = r.get(activated_node, './packets')

        # Sets packet list as root index on object tree.
        object_tree_index = self.object_tree.model().index_from_node(packets)
        self.object_tree.setRootIndex(object_tree_index)

        # Object tree first element
        object_tree_first_item = self.object_tree.model().index(0, 0, object_tree_index)
        self.on_object_tree_clicked(object_tree_first_item)

    @Slot(QModelIndex)
    def on_object_tree_clicked(self, index: QModelIndex):
        activated_node = index.internalPointer()
        self.hex_viewer.set_data(activated_node.buffer)
